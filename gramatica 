<PROGRAMA>
S -> ( program id S' S'' MAIN )
S' -> DECLARACIONVARIABLLES | epsilon
S'' -> DECLARACIONFUNCIONES | epsilon

<DECLARACIONVARIABLLES>
S -> ( vars S' )
S' -> DECLARE S' | epsilon

<DECLARACIONFUNCIONES>
S -> ( functions S' )
S' -> FUNCION S' | epsilon

<MAIN>
S -> ( main S' )
S' -> BLOQUE S' | epsilon

<IMPRIMIR> 
S -> ( print S' )
S' -> cte_ctar | EXPRESION | LISTFUNCITONS | LAMBDA 

<DECLARE>
S -> ( declare id S' )
S' -> DEFINIRLISTA | DEFINIRCTE

<DEFINIRLISTA>
S -> '( )
S' -> DEFINIRCTE S' | epsilon

<DEFINIRCTE>
S -> cte_int | cte_float | cte_char 

<LISTA> 
S -> id | '( S' )  //aqui se deberia de agregar el poder poner una lista sin declarar 
S' -> cte_int S' | cte_float S' | cte_char | epsilon

<VARCTE>
S -> id // id2
S -> cte_int // 1
S -> cte_float // 1.1

<LISTFUNCITONS>
S -> RETURNELEMENT | RETURNLIST

<RETURNLIST>
S -> ( S' LISTA ) | APPEND | LISTA | CREATELIST | MAP | LLAMADA | FILTER
S' -> cdr

<RETURNELEMENT>
S -> ( S' RETURNLIST ) | #t | #f
S' -> car | length | null? | list? | empty?

<APPEND>
S -> ( append RETURNLIST RETURNLIST S' )
S' -> RETURNLIST S' | epsilon

<CREATELIST> //funcion list
S -> ( list s' )
S' -> EXPRESION S' | epsilon

<MAP>
S -> ( map S'' RETURNLIST S' )
S'' -> ( lambda (PARAM) BLOQUE )

// NEW ONE
<MAP>
S -> ( map (lambda (RETURNLIST S') (PARAM) BLOQUE )  )
S' -> RETURNLIST S' | epsilon

<FILTER>
S -> ( filter S' RETURNLIST )
S' -> ( lambda (PARAM) BLOQUE ) | even? | int? | float?

------------------------------------------------------------
Son equivalentes
<EXP> 
S -> ( + EXP EXP ) 
S -> ( - EXP EXP )
S -> ( * EXP EXP ) 
S -> ( / EXP EXP ) 
S -> ( + VARCTE ) 
S -> ( - VARCTE ) 
S -> VARCTE
S -> LLAMADA 
S -> RETURNELEMENT


<EXP> 
S -> ( SIGNOS1 EXP EXP ) 
S -> ( SIGNOS2 EXP EXP )
S -> ( SIGNOS1 VARCTE ) 
S -> VARCTE
S -> LLAMADA 
S -> RETURNELEMENT

<SIGNOS1>
S -> + | -

<SIGNOS2>
S -> * | /

------------------------------------------------------------

<EXPRESION>  // para comparativas
S -> EXP 
S -> ( SIGNOSRELACIONALES EXP EXP )
S -> EXPRESIONESUNARIAS

<SIGNOSRELACIONALES>
S -> > | < | != | =

<EXPRESIONESUNARIAS>
S -> ( S' EXP) | #t | #f
S' -> even? | int? | float? | list? | null? | empty?

<CONDICION>
S -> ( if EXPRESION BLOQUE BLOQUE )

<BLOQUE> 
S -> CONDICION | IMPRIMIR | EXPRESION | LLAMADA | LAMBDA | LISTFUNCITONS

<TIPO> 
S -> int 
S -> float 
S -> char
S -> void
S -> list

<TIPOVARS> 
S -> int 
S -> float 
S -> char
S -> list

<PARAM>
S -> id S | epsilon


<TYPEPARAM>
S -> TIPOVARS id S | epsilon

<FUNCION>
S -> ( define ( ( TIPO id )  TYPEPARAM ) BLOQUE  )


<LLAMADA> //llamada de funcion
S -> ( id S' )
S' -> EXPRESION S' | LISTFUNCITONS S' | epsilon

<LAMBDA> 
S -> ( ( lambda (PARAM) BLOQUE ) S' )
S' -> EXPRESION S' | LISTFUNCITONS S' | epsilon


( ( lambda ( i1 i2 ) (+ i1 i2) ) 1 2 ) 

( 1 2 ( lambda ( i1 i2) (+ i1 i2) ) )

( lambda (1 2) (i1 i2) (+ i1 i2)  )

-- definicion de funcion
-- guardamos type, nombre, vars, parametros, memory, una variable que se llama como la funcion

-- parametros, memory, puede ser void o regresar algo (este algo tambien puede ser varios returns igual que funcion)
-- memory
-- nombre nos vale un carajo (o podemos tener uno generico(para poder manejar lambda adentro de lambda))
-- 
-- tenemos que crear un scope (del lambda)
-- este scope tiene los parametros
-- cada parametro se tiene que llenar con lo que este en lambda_2
-- no nos interesan los types, solo se va a generar algo
-- 